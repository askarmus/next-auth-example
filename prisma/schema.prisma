datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String                  @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?                 @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  accounts           Account[]
  tokens             EmailVerificationToken?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  twoFactorEnabled   Boolean                 @default(false)
  passwordResetToken PasswordResetToken?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model EmailVerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @unique @db.ObjectId
  token   String
  user    User     @relation(fields: [userId], references: [id])
  expires DateTime
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @unique @db.ObjectId
  token   String
  user    User     @relation(fields: [userId], references: [id])
  expires DateTime
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
model Job {
  id                     String           @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String
  jobTitle               String
  description            String
  questions              String[]         // Stored as a string array
  totalApplication       Int              @default(0)
  shortListedApplication Int              @default(0)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  status                 String           @default("open") // Can be "open", "completed", "uncompleted"
  recordStatus           String           @default("active")
  experienceLevel        String
  sentInvitations        SentInvitation[] @relation("JobToSentInvitation") // Explicit relation name
}

model SentInvitation {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId    String
  name     String    
  email    String
  userId   String
  message  String   // Invitation message
  status   String   @default("Pending") // Can be "Pending", "Open", "Completed", "Uncompleted"
  sentOn   DateTime @default(now())
  expires  DateTime // Expiry date of the invitation
  job      Job      @relation("JobToSentInvitation", fields: [jobId], references: [id]) // Explicit relation name
}
